# Copyright 2008 Sun Microsystems, Inc. All rights reserved. 
# Use is subject to license terms.
#
# Please, refer to ACL.txt, JSR 177 specification (Appendix A) 
# and PKCS #15 v1.1 before reading this file.


# PIN id ff should not be used

pin_data {
  id		00
  label		PIN
  type		bcd
  min		04
  max		06
  stored	08
  reference	01
  pad		ff
  flag		disable-allowed
  flag		needs-padding
}

pin_data {	# unblocking PIN
  id		01
  label		PIN2
  type		bcd
  min		04
  max		06
  stored	08
  reference	02
  pad		ff
  flag		disable-allowed
  flag		needs-padding
  flag		unblockingPIN
}

pin_data {	# copy of 0, only id and reference are changed
  id		02
  label		PIN
  type		bcd
  min		04
  max		06
  stored	08
  reference	02
  pad		ff
  flag		disable-allowed
  flag		needs-padding
}


# for UnsupportedOperationException testing - according to the flags PIN can't be disabled, changed or unblocked

pin_data {
  id		fe
  label		PIN fe
  type		bcd
  min		04
  max		06
  stored	08
  reference	fe
  pad		ff
  flag		needs-padding
#  flag		disable-allowed
  flag		change-disabled
  flag		unblock-disabled
}

# for UnsupportedOperationException testing - optional unblocking pin is not specified

pin_data {
  id		fd
  label		PIN fd
  type		bcd
  min		04
  max		06
  stored	08
  reference	fd
  pad		ff
  flag		needs-padding
  flag		disable-allowed
}

# next 7 PINs - for PIN types testing

pin_data {
  id		10
  label		enter 1234 (BCD)
  type		bcd
  min		04
  max		06
  stored	08
  reference	11
}

pin_data {
  id		11
  label		enter 12345 (BCD)
  type		bcd
  min		04
  max		06
  stored	08
  reference	12
}

pin_data {
  id		12
  label		enter 1234 (ASCII)
  type		ascii
  min		04
  max		06
  stored	08
  reference	13
}

pin_data {
  id		13
  label		enter 'test' (UTF)
  type		utf
  min		04
  max		06
  stored	08
  reference	14
}

pin_data {
  id		14
  label		enter 'test' (UTF, case-sensitive)
  type		utf
  min		04
  max		06
  stored	08
  reference	15
  flag          case-sensitive
}

pin_data {
  id		15
  label		enter 1234 (half-nibble)
  type		half-nibble
  min		04
  max		06
  stored	08
  reference	16
}

pin_data {
  id		16
  label		enter 1234 (ISO)
  type		iso
  min		04
  max		06
  stored	08
  reference	17
}

# next 6 PINs - for PIN padding testing

pin_data {
  id		20
  label		enter 1234 (BCD)
  type		bcd
  min		04
  max		06
  stored	08
  reference	21
  pad		77
  flag		needs-padding
}

pin_data {
  id		21
  label		enter 12345 (BCD)
  type		bcd
  min		04
  max		06
  stored	08
  reference	22
  pad		77
  flag		needs-padding
}

pin_data {
  id		22
  label		enter 1234 (ASCII)
  type		ascii
  min		04
  max		06
  stored	08
  reference	23
  pad		ab
  flag		needs-padding
}

pin_data {
  id		23
  label		enter 'test' (UTF)
  type		utf
  min		04
  max		06
  stored	08
  reference	24
  pad		ab
  flag		needs-padding
}

pin_data {
  id		24
  label		enter 'test' (UTF, case-sensitive)
  type		utf
  min		04
  max		06
  stored	08
  reference	25
  pad		ab
  flag          case-sensitive
  flag		needs-padding
}

pin_data {
  id		25
  label		enter 1234 (half-nibble)
  type		half-nibble
  min		04
  max		06
  stored	08
  reference	26
  pad		ab
  flag		needs-padding
}

pin_data {
  id		26
  label		enter 1234 (ISO)
  type		iso
  min		04
  max		06
  stored	08
  reference	27
  pad		ab
  flag		needs-padding
}


acf 11 22 33 44 54 50 49 4e 1 {
  ace {
    pin_apdu {
      id 0
      verify  00 40 00 00
      change  00 42 00 00
      disable 00 44 00 00
      enable  00 46 00 00
      unblock 00 48 00 00
    }

    pin_apdu {	# for UnsupportedOperationException testing
      id fe
      verify  00 40 00 00
      change  00 42 00 00
      disable 00 44 00 00
      enable  00 46 00 00
      unblock 00 48 00 00
    }

    pin_apdu {	# for UnsupportedOperationException testing
      id fd
      unblock 00 48 00 00
    }

    pin_apdu {  # check which exception is thrown if APDU has CLA that can be used only on primary channel
      id 2
      verify  10 40 00 00
      change  73 42 00 00
      disable b2 44 00 00
      enable  c8 46 00 00
      unblock ff 48 00 00
    }

  }
}


acf 11 22 33 44 58 50 49 4e 1 {
  ace {
    pin_jcrmi {
      id 0
      verify	verifyPin([B)S
      change	changePin([B[B)S
      disable	disablePin([B)S
      enable	enablePin([B)S
      unblock	unblockPin([B[B)S
    }

    pin_jcrmi {	# for UnsupportedOperationException testing
      id fe
      verify	verifyPin([B)S
      change	changePin([B[B)S
      disable	disablePin([B)S
      enable	enablePin([B)S
      unblock	unblockPin([B[B)S
    }

    pin_jcrmi {	# for UnsupportedOperationException testing
      id fd
      unblock	unblockPin([B[B)S
    }
  }
}



acf 11 22 33 44 54 50 49 4e 2 {		# this applet is used to test PIN methods behavior (SecurityException)
  ace {
    pin_apdu {
      id 0
      verify  00 40 00 00
      change  00 42 00 00
      disable 00 44 00 00
      enable  00 46 00 00
      unblock 00 48 00 00
    }
    apdu {
       0 20 0 0 00 ff 0 0
    }

  }
}



acf 11 22 33 44 58 50 49 4e 2 {		# this applet is used to test PIN methods behavior (SecurityException)
  ace {

    pin_jcrmi {
      id 0
      verify	verifyPin([B)S
      change	changePin([B[B)S
      disable	disablePin([B)S
      enable	enablePin([B)S
      unblock	unblockPin([B[B)S
    }

    jcrmi {
      classes {
          com.sun.satsa.remote.rmi_pin.RemotePIN
      }
      methods {
          getChannel()S
      }
    }
  }
}




acf 11 22 33 44 54 50 49 4e 3 {		# this applet is used to test:
					# - default APDUs for PIN methods,
  ace {                                 # - PIN formats
    pin_apdu {                          # - padding
      id 0
    }
    pin_apdu {
      id 10
    }
    pin_apdu {
      id 11
    }
    pin_apdu {
      id 12
    }
    pin_apdu {
      id 13
    }
    pin_apdu {
      id 14
    }
    pin_apdu {
      id 15
    }
    pin_apdu {
      id 16
    }
    pin_apdu {
      id 20
    }
    pin_apdu {
      id 21
    }
    pin_apdu {
      id 22
    }
    pin_apdu {
      id 23
    }
    pin_apdu {
      id 24
    }
    pin_apdu {
      id 25
    }
    pin_apdu {
      id 26
    }
  }
}

acf 11 22 33 44 58 50 49 4e 3 {		# this applet is used to test:
					# - default APDUs for PIN methods,
  ace {                                 # - PIN formats
    pin_jcrmi {                         # - padding
      id 0
      verify	verifyPin([B)S
      change	changePin([B[B)S
      disable	disablePin([B)S
      enable	enablePin([B)S
      unblock	unblockPin([B[B)S
    }
    pin_jcrmi {
      id 10
      verify  verifyPin([B)S
    }
    pin_jcrmi {
      id 11
      verify  verifyPin([B)S
    }
    pin_jcrmi {
      id 12
      verify  verifyPin([B)S
    }
    pin_jcrmi {
      id 13
      verify  verifyPin([B)S
    }
    pin_jcrmi {
      id 14
      verify  verifyPin([B)S
    }
    pin_jcrmi {
      id 15
      verify  verifyPin([B)S
    }
    pin_jcrmi {
      id 16
      verify  verifyPin([B)S
    }
    pin_jcrmi {
      id 20
      verify  verifyPin([B)S
    }
    pin_jcrmi {
      id 21
      verify  verifyPin([B)S
    }
    pin_jcrmi {
      id 22
      verify  verifyPin([B)S
    }
    pin_jcrmi {
      id 23
      verify  verifyPin([B)S
    }
    pin_jcrmi {
      id 24
      verify  verifyPin([B)S
    }
    pin_jcrmi {
      id 25
      verify  verifyPin([B)S
    }
    pin_jcrmi {
      id 26
      verify  verifyPin([B)S
    }
  }
}



acf 11 22 33 44 57 A0 {}	# security exception in Connector.open()

acf 11 22 33 44 52 A0 {}	# security exception in Connector.open()

acf 11 22 33 44 57 A1 {		# security exception during remote method invocation/exchangeAPDU

  ace {
    jcrmi {
      classes {
          com.sun.satsa.remote.rmi_1.Remote1
      }
      hashModifier xxx
      methods {
          getShort(S)S
          getInt(I)I
      }
    }
  }
}

acf 11 22 33 44 52 A1 {		# security exception during remote method invocation/exchangeAPDU

  ace {
    apdu {
       80 80 80 80 80 80 80 80	# MSB of each byte is set
       51  0  0  0 ff  0  0  0	# CLA = 0x51
       80 10  0  0 ff ff ff ff	# command is used to get LC number
    }
  }
}

acf 11 22 33 44 57 A2 {		# security exception during remote method invocation

  ace {
    jcrmi {
      classes {
          com.sun.satsa.remote.rmi_1.Remote
      }
      methods {
          getShort(S)S
          getInt(I)I
      }
    }
  }
}

acf 11 22 33 44 57 A3 {		# security exception during remote method invocation

  ace {
    jcrmi {
      classes {
          com.sun.satsa.remote.rmi_1.Remote1
      }
    }
  }
}
